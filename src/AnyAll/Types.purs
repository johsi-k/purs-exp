-- File auto generated by purescript-bridge! --
module AnyAll.Types
  where

import Prelude

import Data.Argonaut.Decode.Class (class DecodeJson, decodeJson)
import Data.Argonaut.Decode.Generic (genericDecodeJsonWith)
import Data.Argonaut.Encode.Class (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Generic (genericEncodeJsonWith)
import Data.Argonaut.Types.Generic as Gen
import Data.Generic.Rep (class Generic)
import Data.Maybe (Maybe)
import Data.Show.Generic (genericShow)
import Prim (Array)

data Item' a b =
    Leaf b
  | All {
      itemLbl :: Maybe a
    , itemsAll :: Array (Item' a b)
    }
  | Any {
      itemLbl :: Maybe a
    , itemsAny :: Array (Item' a b)
    }
  | Not (Item' a b)



-- does not work
-- derive instance genericItem' :: (Generic a ra, Generic b rb) => Generic (Item' a b) _
-- gives error on genericShow:
--   No type class instance was found for

--     Data.Generic.Rep.Generic a2
--                              t4
-- while solving type class constraint

--   Data.Generic.Rep.Generic (Item' a2 b3)
--                            t1
-- while applying a function genericShow
--   of type Generic t0 t1 => GenericShow t1 => t0 -> String
--   to argument a
-- while checking that expression genericShow a
--   has type String
-- in value declaration showItem'

derive instance genericItem' :: Generic (Item' a b) _


instance showItem' :: (Show a, Show b) => Show (Item' a b) where
  show a = genericShow a


instance encodeJsonItem' :: (EncodeJson a, EncodeJson b) => EncodeJson (Item' a b) where
  encodeJson a = genericEncodeJsonWith aesonEncoding a
instance decodeJsonItem' :: (DecodeJson a, DecodeJson b) => DecodeJson (Item' a b) where
  decodeJson a = genericDecodeJsonWith aesonEncoding a


aesonEncoding :: Gen.Encoding
aesonEncoding =
  { tagKey: "tag"
  , valuesKey: "contents"
  , unwrapSingleArguments: true
  }


data Label a =
    Pre a
  | PrePost a a

-- derive instance genericLabel :: Generic a ra => Generic (Label a) _
derive instance genericLabel :: Generic (Label a) _

instance showLabel :: Show a => Show (Label a) where
  show = genericShow

instance encodeJsonLabel :: EncodeJson a => EncodeJson (Label a) where
  encodeJson a = genericEncodeJsonWith aesonEncoding a
instance decodeJsonLabel :: DecodeJson a => DecodeJson (Label a) where
  decodeJson a = genericDecodeJsonWith aesonEncoding a
