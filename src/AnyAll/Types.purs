-- File auto generated by purescript-bridge! --
module AnyAll.Types
  ( Item'(..)
  , Label(..)
  )
  where

import Prelude

import Data.Argonaut.Decode.Class (class DecodeJson)
import Data.Argonaut.Encode.Class (class EncodeJson)
import Data.Generic.Rep (class Generic)
import Data.Maybe (Maybe)
import Data.Show.Generic (genericShow)
import Prim (Array)

import Data.Argonaut.Aeson.Decode.Generic (genericDecodeAeson)
import Data.Argonaut.Aeson.Encode.Generic (genericEncodeAeson)
import Data.Argonaut.Aeson.Options (defaultOptions)


-- data Item' a b =
--     Leaf b
--   | All {
--       itemLbl :: Maybe a
--     , itemsAll :: Array (Item' a b)
--     }
--   | Any {
--       itemLbl :: Maybe a
--     , itemsAny :: Array (Item' a b)
--     }
--   | Not (Item' a b)


data Item' a b =
    Leaf b
  | All (Maybe a) (Array (Item' a b))
  | Any (Maybe a) (Array (Item' a b))
  | Not (Item' a b)


derive instance genericItem' :: Generic (Item' a b) _


instance showItem' :: (Show a, Show b) => Show (Item' a b) where
  show a = genericShow a

instance encodeJsonItem' :: (EncodeJson a, EncodeJson b) => EncodeJson (Item' a b) where
  encodeJson a = genericEncodeAeson defaultOptions a
instance decodeJsonItem' :: (DecodeJson a, DecodeJson b) => DecodeJson (Item' a b) where
  decodeJson a = genericDecodeAeson defaultOptions a


data Label a =
    Pre a
  | PrePost a a

-- derive instance genericLabel :: Generic a ra => Generic (Label a) _
derive instance genericLabel :: Generic (Label a) _

instance showLabel :: Show a => Show (Label a) where
  show = genericShow

instance encodeJsonLabel :: EncodeJson a => EncodeJson (Label a) where
  encodeJson a = genericEncodeAeson defaultOptions a
instance decodeJsonLabel :: DecodeJson a => DecodeJson (Label a) where
  decodeJson a = genericDecodeAeson defaultOptions a
